#Nth Highest Salary
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  RETURN(
  select distinct e1.Salary
  from Employee e1
  where N-1 = (select count(distinct e2.Salary)
               from Employee e2
               where e1.Salary < e2.Salary)
  );
END
 
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
DECLARE M = N-1
  RETURN(
  select DISTINCT Salary
  from Employee
  order by Salary DESC
  LIMIT M,1
  );
END
  
 #Consecutive Available Seats
 select distinct seat_id
 from cinema a
 join cinema b
 where abs(a.seat_id - b.seat_id = 1)
 and a.free = 1 and b.free = 1
 order by a.seat_id;
 
 #Department Highest Salary
 select D.Name as Department, e1.Name as Employee, e1.Salary
 from Department D, Employee e1
 where e1.Salary = (select MAX(Salary) from Employee group by DepartmentId
                      ) and D.DepartmentId = e1.Id
 order by D.DepartmentId

#Big Contries
select name, population, area
from World
where area > 3000000 or population >250000000;

#Exchange Seats
select 
  case
    when seat.id % 2 = 0 then seat.id -1
    when seat.id % 2 <> 0 and seat.id = (select count(*) from seat) then seat.id
    else
        seat.id+1
  end as id,
  student
 from seat
 order by id;

#Managers with at Least 5 Direct Reports
select Name
from Employee as a1
join 
(select ManagerId
 from Employee
 groupby ManagerId
 having count(ManagerId) >= 5
 ) as a2
 on a1.Id = a2.ManagerId
 ;
 
 #Friend Requests I: Overall Acceptance Rate
 select ifnull(Round(count(distinct requester_id, accepter_id) / count(distinct sender_id, send_to_id),2),0) 
 as accept_rate
 from friend_request, request_accepted
 ;
 
 
 
